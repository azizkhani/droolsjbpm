// we use MVEL to configure our nodes, simply populate a map, which will be added to the main registry
import org.drools.bpel.core.BPELAssign;
import org.drools.bpel.core.BPELFlow;
import org.drools.bpel.core.BPELInvoke;
import org.drools.bpel.core.BPELReceive;
import org.drools.bpel.core.BPELReply;
import org.drools.bpel.core.BPELScope;
import org.drools.bpel.core.BPELFaultHandlerScope;
import org.drools.bpel.core.BPELSequence;
import org.drools.bpel.core.BPELEmpty;
import org.drools.bpel.core.BPELPick;
import org.drools.bpel.core.BPELIf;
import org.drools.bpel.core.BPELThrow;
import org.drools.bpel.core.BPELRethrow;
import org.drools.bpel.core.BPELWait;
import org.drools.bpel.core.BPELWhile;
import org.drools.bpel.core.BPELRepeatUntil;
import org.drools.bpel.core.BPELExit;
import org.drools.bpel.instance.BPELAssignInstance;
import org.drools.bpel.instance.BPELFlowInstance;
import org.drools.bpel.instance.BPELInvokeInstance;
import org.drools.bpel.instance.BPELReceiveInstance;
import org.drools.bpel.instance.BPELReplyInstance;
import org.drools.bpel.instance.BPELScopeInstance;
import org.drools.bpel.instance.BPELSequenceInstance;
import org.drools.bpel.instance.BPELEmptyInstance;
import org.drools.bpel.instance.BPELPickInstance;
import org.drools.bpel.instance.BPELIfInstance;
import org.drools.bpel.instance.BPELThrowInstance;
import org.drools.bpel.instance.BPELRethrowInstance;
import org.drools.bpel.instance.BPELWaitInstance;
import org.drools.bpel.instance.BPELWhileInstance;
import org.drools.bpel.instance.BPELRepeatUntilInstance;
import org.drools.bpel.instance.BPELExitInstance;
import org.drools.workflow.instance.node.CompositeContextNodeInstance;
import org.drools.workflow.instance.impl.factory.ReuseNodeFactory;

[
    BPELAssign                      : new ReuseNodeFactory( BPELAssignInstance ),
    BPELFlow                        : new ReuseNodeFactory( BPELFlowInstance ),
    BPELInvoke                      : new ReuseNodeFactory( BPELInvokeInstance ),
    BPELReceive                     : new ReuseNodeFactory( BPELReceiveInstance ),
    BPELReply                       : new ReuseNodeFactory( BPELReplyInstance ),
    BPELScope                       : new ReuseNodeFactory( BPELScopeInstance ),
    BPELFaultHandlerScope           : new ReuseNodeFactory( CompositeContextNodeInstance ),
    BPELSequence                    : new ReuseNodeFactory( BPELSequenceInstance ),
    BPELEmpty                       : new ReuseNodeFactory( BPELEmptyInstance ),
    BPELPick                        : new ReuseNodeFactory( BPELPickInstance ),
    BPELIf                          : new ReuseNodeFactory( BPELIfInstance ),
    BPELThrow                       : new ReuseNodeFactory( BPELThrowInstance ),
    BPELRethrow                     : new ReuseNodeFactory( BPELRethrowInstance ),
    BPELWait                        : new ReuseNodeFactory( BPELWaitInstance ),
    BPELWhile                       : new ReuseNodeFactory( BPELWhileInstance ),
    BPELRepeatUntil                 : new ReuseNodeFactory( BPELRepeatUntilInstance ),
    BPELExit                        : new ReuseNodeFactory( BPELExitInstance ),
]
