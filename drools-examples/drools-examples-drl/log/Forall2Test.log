Existential check 1.0
Eval Record info(1.0) for args L : Message 32	Message 31	 
AND{
(63@20) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-exists()) [EVAL 1.0,]
(32@21) : 1.0 Test Forall 2 [EVAL 0.0,PRIOR 1.0,]
}

(63@22) : 1.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-exists())Test Forall 2) [EVAL 1.0,]
	(63@20) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-exists()) [EVAL 1.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
		(63@19) : 1.0 -exists() [EVAL 1.0,]
			(63@-1) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 0.0,]
				(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
					(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
				(63@17) : 0.0 -dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m))) [EVAL 0.0,]
					(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(63@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(31@11) : 1.0 Integer <=(org.drools.chance.Message.status,1) [EVAL 1.0,]
						(63@12) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
					(63@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(31@15) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
						(63@12) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
	(32@21) : 1.0 Test Forall 2 [EVAL 0.0,PRIOR 1.0,]


Existential check 0.0
Eval Record info(1.0) for args L : Message 32	Message 31	 
AND{
(63@20) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-exists()) [EVAL 0.0,]
(32@21) : 1.0 Test Forall 2 [EVAL 0.0,PRIOR 1.0,]
}

(63@22) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-exists())Test Forall 2) [EVAL 0.0,]
	(63@20) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-exists()) [EVAL 0.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
		(30@19) : 0.0 -exists() [EVAL 0.0,]
			(63@-1) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 0.0,]
				(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
					(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
				(63@17) : 0.0 -dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m))) [EVAL 0.0,]
					(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(63@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(31@11) : 1.0 Integer <=(org.drools.chance.Message.status,1) [EVAL 1.0,]
						(63@12) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
					(63@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(31@15) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
						(63@12) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
			(1@-1) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 1.0,]
				(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
					(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
				(1@17) : 1.0 -dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m))) [EVAL 1.0,]
					(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
						(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(1@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 0.0,]
						(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(33@11) : 0.0 Integer <=(org.drools.chance.Message.status,1) [EVAL 0.0,]
						(1@12) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
					(1@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
						(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(32@15) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
						(1@12) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
			(30@-1) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),-dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 1.0,]
				(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
					(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
				(30@17) : 1.0 -dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m))) [EVAL 1.0,]
					(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
					(30@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer <=(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 0.0,]
						(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(33@11) : 0.0 Integer <=(org.drools.chance.Message.status,1) [EVAL 0.0,]
						(30@12) : 0.0 Object ==(org.drools.chance.Message.this,m) [EVAL 0.0,]
					(30@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
						(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
						(31@15) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
						(30@12) : 0.0 Object ==(org.drools.chance.Message.this,m) [EVAL 0.0,]
	(32@21) : 1.0 Test Forall 2 [EVAL 0.0,PRIOR 1.0,]


