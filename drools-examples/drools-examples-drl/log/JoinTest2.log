M0  M0M0
Self-Join check 1.0
Eval Record info(1.0) for args L : Message 31	 
AND{
(31@12) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 1.0,]
(31@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(31@14) : 1.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 1.0,]
	(31@12) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 1.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(31@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(31@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(31@11) : 1.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 1.0,]
	(31@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M1  M1M0
Self-Join check 0.0
Eval Record info(1.0) for args L : Message 32	Message 31	 
AND{
(63@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
(63@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(63@14) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 0.0,]
	(63@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(32@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(32@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(63@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 0.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(63@11) : 0.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 0.0,]
	(63@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M1  M1M1
Self-Join check 1.0
Eval Record info(1.0) for args L : Message 32	 
AND{
(32@12) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 1.0,]
(32@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(32@14) : 1.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 1.0,]
	(32@12) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 1.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(32@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(32@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(32@11) : 1.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 1.0,]
	(32@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M0  M0M1
Self-Join check 0.0
Eval Record info(1.0) for args L : Message 31	Message 32	 
AND{
(63@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
(63@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(63@14) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 0.0,]
	(63@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(31@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(31@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(63@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 0.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(63@11) : 0.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 0.0,]
	(63@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M2  M2M1
Self-Join check 0.0
Eval Record info(1.0) for args L : Message 33	Message 32	 
AND{
(1@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
(1@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(1@14) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 0.0,]
	(1@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(33@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(33@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(1@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 0.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(1@11) : 0.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 0.0,]
	(1@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M2  M2M0
Self-Join check 0.0
Eval Record info(1.0) for args L : Message 33	Message 31	 
AND{
(62@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
(62@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(62@14) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 0.0,]
	(62@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(33@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(33@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(62@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 0.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(62@11) : 0.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 0.0,]
	(62@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M2  M2M2
Self-Join check 1.0
Eval Record info(1.0) for args L : Message 33	 
AND{
(33@12) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 1.0,]
(33@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(33@14) : 1.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 1.0,]
	(33@12) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 1.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(33@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(33@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(33@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 1.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(33@11) : 1.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 1.0,]
	(33@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M1  M1M2
Self-Join check 0.0
Eval Record info(1.0) for args L : Message 32	Message 33	 
AND{
(1@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
(1@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(1@14) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 0.0,]
	(1@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(32@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(32@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(1@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 0.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(1@11) : 0.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 0.0,]
	(1@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M0  M0M2
Self-Join check 0.0
Eval Record info(1.0) for args L : Message 31	Message 33	 
AND{
(62@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
(62@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(62@14) : 0.0 minAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))),Test Join 2) [EVAL 0.0,]
	(62@12) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message)),dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s))) [EVAL 0.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
		(31@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer >(org.drools.chance.Message.status,-1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
			(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(31@7) : 1.0 Integer >(org.drools.chance.Message.status,-1) [EVAL 1.0,]
			(31@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
		(62@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,$s)) [EVAL 0.0,]
			(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
			(62@11) : 0.0 Integer ==(org.drools.chance.Message.status,$s) [EVAL 0.0,]
	(62@13) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


