M0  M0Self-Join check 0.0
Eval Record info(1.0) for args L : Message 31	 
AND{
(31@10) : 0.0 dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 0.0,]
(31@11) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(31@12) : 0.0 minAnd(dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))),Test Join 2) [EVAL 0.0,]
	(31@10) : 0.0 dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 0.0,]
		(31@9) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m))) [EVAL 0.0,]
			(31@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 0.0,]
				(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
				(31@4) : 0.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 0.0,]
			(31@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 0.0,]
				(31@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
				(31@4) : 0.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 0.0,]
				(31@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
	(31@11) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M1  M1Self-Join check 1.0
Eval Record info(1.0) for args L : Message 32	 
AND{
(32@10) : 1.0 dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 1.0,]
(32@11) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(32@12) : 1.0 minAnd(dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))),Test Join 2) [EVAL 1.0,]
	(32@10) : 1.0 dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 1.0,]
		(32@9) : 1.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m))) [EVAL 1.0,]
			(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 1.0,]
				(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
				(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
			(32@1) : 1.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 1.0,]
				(32@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
				(32@4) : 1.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 1.0,]
				(32@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
	(32@11) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


M2  M2Self-Join check 0.0
Eval Record info(1.0) for args L : Message 33	 
AND{
(33@10) : 0.0 dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 0.0,]
(33@11) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]
}

(33@12) : 0.0 minAnd(dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))),Test Join 2) [EVAL 0.0,]
	(33@10) : 0.0 dotAnd(dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)))) [EVAL 0.0,]
		(33@9) : 0.0 dotAnd(dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)),dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m))) [EVAL 0.0,]
			(33@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1)) [EVAL 0.0,]
				(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
				(33@4) : 0.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 0.0,]
			(33@1) : 0.0 dotAnd(==(class,org.drools.chance.Message),Integer ==(org.drools.chance.Message.status,1),Object ==(org.drools.chance.Message.this,m)) [EVAL 0.0,]
				(33@3) : 1.0 ==(class,org.drools.chance.Message) [EVAL 1.0,]
				(33@4) : 0.0 Integer ==(org.drools.chance.Message.status,1) [EVAL 0.0,]
				(33@8) : 1.0 Object ==(org.drools.chance.Message.this,m) [EVAL 1.0,]
	(33@11) : 1.0 Test Join 2 [EVAL 0.0,PRIOR 1.0,]


