package org.drools.solver.examples.itc2007.examination.solver;
    dialect "java"

import org.drools.solver.core.score.calculator.HardAndSoftConstraintScoreCalculator;
import org.drools.solver.core.score.constraint.IntConstraintOccurrence;
import org.drools.solver.core.score.constraint.ConstraintType;

import org.drools.solver.examples.patientadmissionschedule.domain.AdmissionPart;
import org.drools.solver.examples.patientadmissionschedule.domain.Bed;
import org.drools.solver.examples.patientadmissionschedule.domain.BedDesignation;
import org.drools.solver.examples.patientadmissionschedule.domain.Department;
import org.drools.solver.examples.patientadmissionschedule.domain.DepartmentSpecialism;
import org.drools.solver.examples.patientadmissionschedule.domain.Equipment;
import org.drools.solver.examples.patientadmissionschedule.domain.Gender;
import org.drools.solver.examples.patientadmissionschedule.domain.GenderLimitation;
import org.drools.solver.examples.patientadmissionschedule.domain.Night;
import org.drools.solver.examples.patientadmissionschedule.domain.Patient;
import org.drools.solver.examples.patientadmissionschedule.domain.PatientAdmissionSchedule;
import org.drools.solver.examples.patientadmissionschedule.domain.PreferredPatientEquipment;
import org.drools.solver.examples.patientadmissionschedule.domain.RequiredPatientEquipment;
import org.drools.solver.examples.patientadmissionschedule.domain.Room;
import org.drools.solver.examples.patientadmissionschedule.domain.RoomEquipment;
import org.drools.solver.examples.patientadmissionschedule.domain.RoomSpecialism;
import org.drools.solver.examples.patientadmissionschedule.domain.Specialism;
import org.drools.solver.examples.patientadmissionschedule.domain.solver.AdmissionPartConflict;

global HardAndSoftConstraintScoreCalculator scoreCalculator;

// ############################################################################
// Hard constraints
// ############################################################################

// Two admissionParts in the same bed for a number of nights.
rule "conflictingBedDesignationInSameNight"
    when
        $admissionPartConflict : AdmissionPartConflict($leftAdmissionPart : leftAdmissionPart, $rightAdmissionPart : rightAdmissionPart);
        $leftBedDesignation : BedDesignation(admissionPart == $leftAdmissionPart, $bed : bed);
        $rightBedDesignation : BedDesignation(admissionPart == $rightAdmissionPart, bed == $bed);
    then
        insertLogical(new IntConstraintOccurrence("conflictingBedDesignationInSameNight", ConstraintType.NEGATIVE_HARD,
                $admissionPartConflict.getNightSize(),
                $leftBedDesignation, $rightBedDesignation));
end

// Accumulate hard constraints
rule "hardConstraintsBroken"
        salience -1 // Finish the other rules first (optional, for performance)
    when
        $hardTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_HARD, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        );
    then
        scoreCalculator.setHardConstraintsBroken($hardTotal.intValue());
end

// ############################################################################
// Soft constraints
// ############################################################################

// Accumulate soft constraints
rule "softConstraintsBroken"
        salience -1 // Finish the other rules first (optional, for performance)
    when
        $softTotal : Number() from accumulate(
            IntConstraintOccurrence(constraintType == ConstraintType.NEGATIVE_SOFT, $weight : weight),
            sum($weight) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
        );
    then
        scoreCalculator.setSoftConstraintsBroken($softTotal.intValue());
end
