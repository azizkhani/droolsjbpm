package org.drools.solver.examples.nqueens.solver;

import org.drools.solver.core.score.calculator.SimpleScoreCalculator;
import org.drools.solver.core.score.constraint.ConstraintOccurrence;
import org.drools.solver.core.score.constraint.ConstraintType;

import org.drools.solver.examples.nqueens.domain.Queen;

global SimpleScoreCalculator scoreCalculator;

// ############################################################################
// Hard constraints
// ############################################################################

rule "multipleQueensHorizontal"
    when
        $q1 : Queen($id : id, $y : y);
        $q2 : Queen(id > $id, y == $y);
    then
        insertLogical(new ConstraintOccurrence("multipleQueensHorizontal", $q1, $q2));
end

// multipleQueensVertical is obsolete because it is always 0

rule "multipleQueensAscendingDiagonal"
    when
        $q1 : Queen($id : id, $ascendingD : ascendingD);
        $q2 : Queen(id > $id, ascendingD == $ascendingD);
    then
        insertLogical(new ConstraintOccurrence("multipleQueensAscendingDiagonal", $q1, $q2));
end

rule "multipleQueensDescendingDiagonal"
    when
        $q1 : Queen($id : id, $descendingD : descendingD);
        $q2 : Queen(id > $id, descendingD == $descendingD);
    then
        insertLogical(new ConstraintOccurrence("multipleQueensDescendingDiagonal", $q1, $q2));
end

rule "constraintsBroken"
    when
        $hardConstraintCount : Number() from accumulate(
            $constraintOccurrence : ConstraintOccurrence(),
            count($constraintOccurrence)
        );
    then
        scoreCalculator.setScore(- $hardConstraintCount.intValue());
end

// Don't do this. It breaks performance and scalability!
//rule "constraintsBroken"
//    when
//        $multipleQueensHorizontal : Number()
//        from accumulate(
//            $q1 : Queen($id : id, $y : y)
//            and Queen(id > $id, y == $y),
//            count($q1)
//        );
//        $multipleQueensAscendingDiagonal : Number()
//        from accumulate(
//            $q1 : Queen($id : id, $ascendingD : ascendingD)
//            and Queen(id > $id, ascendingD == $ascendingD),
//            count($q1)
//        );
//        $multipleQueensDescendingDiagonal : Number()
//        from accumulate(
//            $q1 : Queen($id : id, $descendingD : descendingD)
//            and Queen(id > $id, descendingD == $descendingD),
//            count($q1)
//        );
//    then
//        scoreCalculator.setScore(- $multipleQueensHorizontal.intValue()
//                - $multipleQueensAscendingDiagonal.intValue() - $multipleQueensDescendingDiagonal.intValue());
//end
