package org.drools.solver.examples.itc2007.examination.solver;

import org.drools.solver.core.evaluation.scorecalculator.HardAndSoftConstraintScoreCalculator;

import org.drools.solver.examples.itc2007.examination.domain.Exam;
import org.drools.solver.examples.itc2007.examination.domain.Examination;
import org.drools.solver.examples.itc2007.examination.domain.InstitutionalWeighting;
import org.drools.solver.examples.itc2007.examination.domain.Period;
import org.drools.solver.examples.itc2007.examination.domain.PeriodHardConstraint;
import org.drools.solver.examples.itc2007.examination.domain.PeriodHardConstraintType;
import org.drools.solver.examples.itc2007.examination.domain.Room;
import org.drools.solver.examples.itc2007.examination.domain.RoomHardConstraint;
import org.drools.solver.examples.itc2007.examination.domain.RoomHardConstraintType;
import org.drools.solver.examples.itc2007.examination.domain.Student;
import org.drools.solver.examples.itc2007.examination.domain.Topic;
import org.drools.solver.examples.common.solver.domain.WorkaroundMultiplePatternAccumulate;

global HardAndSoftConstraintScoreCalculator scoreCalculator;

// Two exams in the same period which share students.
rule "conflictingExamsInSamePeriod"
  when
    $student : Student();
    $exam : Exam($id : id, topic.studentList contains $student, $period : period);
    Exam(period == $period, id > $id, topic.studentList contains $student);
  then
    insertLogical(new WorkaroundMultiplePatternAccumulate("conflictingExamsInSamePeriod", $exam));
end

// More time required during a period than available in that period.
rule "periodDurationTooShort"
  when
    $exam : Exam($periodDuration : period.durationInMinutes, topic.duration > $periodDuration);
  then
    insertLogical(new WorkaroundMultiplePatternAccumulate("periodDurationTooShort", $exam));
end

// More seating required during a period in a room than available in that room.
rule "roomCapacityTooSmall"
  when
    $period : Period();
    $room : Room($capacity : capacity);
    $totalStudentListSize : Number() from accumulate(
      Exam(period == $period, room == $room, $studentListSize : topic.studentListSize),
      // sumInteger($studentListSize) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
      sum($studentListSize)
    );
    eval($totalStudentListSize.intValue() > $capacity);
  then
    insertLogical(new WorkaroundMultiplePatternAccumulate("roomCapacityTooSmall", $room)); // TODO FIXME, use $period too
end

//
//PeriodRelated: Ordering requirements not obeyed.
//
//RoomRelated: Room requirements not obeyed


rule "hardConstraintsBroken"
  salience -1 // Finish the other rules first (optional, for performance)
  when
    $hardCount : Number() from accumulate(
       $w : WorkaroundMultiplePatternAccumulate(),
       // countInteger($w) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
       count($w) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
    );
  then
    scoreCalculator.setHardConstraintsBroken($hardCount.intValue());
end
// TODO implement me
//Two Exams in a Row
//
//Two Exams in a Day
//
//Period Spread
//
//Mixed Durations
//
//Larger Exams Constraints
//
//Room Penalty
//
//Period Penalty 
