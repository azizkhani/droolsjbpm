<project name="drools-repository" default="main" basedir=".">        
    <property file="build.properties"/>        
    
    <!-- default jdk location -->
    <condition property="java.home.path" value="/usr/java/jdk1.5.0_05">
        <not><isset property="${java.home.path}"/></not>
    </condition>
        
    <property environment="env"/>
	        
    <property name="deploy.home" value="${jboss.home}/server/all/deploy"/>            
    <property name="conf.home" value="${jboss.home}/server/all/conf"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="reports.dir" value="${basedir}/reports"/>
    <property name="classes.dir" value="${basedir}/classes"/>
    <property name="src.dir" value="${basedir}/src/java"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="resources.dir" value="${basedir}/resources"/>
    <property name="doc.dir" value="${basedir}/doc"/>
    <property name="java.home" value="${java.home.path}"/>
    
    <path id="axis.path">
        <fileset dir="${axis.home}/lib" includes="*.jar"/>
        <fileset dir="${jboss.home}/client" includes="activation.jar,mail.jar"/>
    </path>

    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>    
    
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="project.classpath"/>    

    <path id="base.libraries">
        <pathelement location="${classes.dir}"/>
        <fileset dir="${axis.home}/lib" includes="*.jar"/>
        <fileset dir="${jboss.home}/lib" includes="*.jar"/>
        <fileset dir="${jboss.home}/client" includes="*.jar"/>
        <fileset dir="${jboss.home}/server/all/lib" includes="*.jar"/>
        <fileset dir="${junit.home}" includes="junit.jar"/>
        <fileset dir="${lib.dir}" includes="*.jar"/>
    </path>
    
    <import file="./build.internal-targets.xml"/>
    
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
<!-- these are the external targets. they are the ones that will be used typically by users. all internal      -->
<!-- targets, which are not intended to be used by users normally, are in build.internal-targets.xml.          -->
<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->
    
    <!-- Note: in the future if we decide to use hot-deploys with exploded jars, the build-incremental, build-full
               and deploy targets will need to work differently. -->
    <target name="build-incremental" depends="jar" description="do an incremental build of jar"/>    
    
    <target name="build-full" depends="clean, jar" description="do a clean build of jar "/>   
    
    <target name="build-cc" depends="clean, fetch, build-full, deploy, test" description="The build that is run by the continuous integration tool (CruiseControl). Run clean, fetch, build-full, test"/>
    
    <target name="test" description="run the junit tests. generate a report.">
        <junit printsummary="yes" showoutput="yes" dir="${basedir}" haltonerror="false" haltonfailure="false" failureproperty="junitFailure">
            <classpath>
                <pathelement path="${classes.dir}"/>
                <pathelement path="${src.dir}"/>
                <pathelement path="./${resources.dir}"/>
                <path refid="project.classpath"/>
                <path refid="base.libraries"/>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <sysproperty key="java.endorsed.dirs" value="${jboss.home}/lib/endorsed"/>
            <batchtest fork="yes" todir="${reports.dir}">
                <fileset dir="${src.dir}">
                    <include name="org/drools/repository/test/**/*Test.java"/>
                    <include name="org/drools/repository/test/**/*TestCase.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${reports.dir}">
            <fileset dir="${reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" 
                    styledir="${resources.dir}/styles"
                    todir="${reports.dir}/html"/>
        </junitreport>
        <fail if="junitFailure"/>
    </target>
    
    <target name="clean" description="clean out the output directories">
        <delete>
            <fileset dir="${dist.dir}" includes="*.jar"/>
        </delete>
        <delete dir="${classes.dir}/com"/>        
        <delete>
            <fileset dir="${reports.dir}" includes="**/*"/>        
        </delete>        
    </target>
        
    <target name="deploy" description="ship the jars, wars, whatever to the execution system (this system)">
        <fail message="not yet implemented" />    
    </target>    
        
    <target name="fetch" description="get the latest source from the subversion repository">
        <fail message="not yet implemented" />
    </target>
    
    <target name="javadoc" description="do the documentation">
        <javadoc destdir="${doc.dir}/javadoc" author="true" version="true" maxmemory="256M" use="true" packagenames="org.drools.repository.*" sourcepath="${src.dir}" windowtitle="rules repository API">
            <classpath>
                <path refid="base.libraries"/>
                <path location="${junit.home}/junit.jar"/>
            </classpath>    
            <doctitle><![CDATA[<h1>rules repository API</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2006 Rackspace Corp. All Rights Reserved.</i>]]></bottom>
            <tag name="todo" scope="all" description="To do:"/>
        </javadoc>
    </target>    
    
    <target name="all" depends="clean, fetch, build-full, test, javadoc, deploy" description="clean, fetch, build, javadoc, deploy, test"/>

    <target name="main" depends="build-incremental, test" description="the default target. build-incremental, test"/>       

</project>
